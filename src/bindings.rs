/* automatically generated by rust-bindgen */

use libc;

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __IncompleteArrayField<T> {}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const MSG_NOTIFICATION: ::std::os::raw::c_uint = 0x2000;
pub const SCTP_FUTURE_ASSOC: ::std::os::raw::c_uint = 0;
pub const SCTP_CURRENT_ASSOC: ::std::os::raw::c_uint = 1;
pub const SCTP_ALL_ASSOC: ::std::os::raw::c_uint = 2;
pub const SCTP_ALIGN_RESV_PAD: ::std::os::raw::c_uint = 92;
pub const SCTP_ALIGN_RESV_PAD_SHORT: ::std::os::raw::c_uint = 76;
pub const SCTP_NO_NEXT_MSG: ::std::os::raw::c_uint = 0;
pub const SCTP_NEXT_MSG_AVAIL: ::std::os::raw::c_uint = 1;
pub const SCTP_NEXT_MSG_ISCOMPLETE: ::std::os::raw::c_uint = 2;
pub const SCTP_NEXT_MSG_IS_UNORDERED: ::std::os::raw::c_uint = 4;
pub const SCTP_NEXT_MSG_IS_NOTIFICATION: ::std::os::raw::c_uint = 8;
pub const SCTP_RECVV_NOINFO: ::std::os::raw::c_uint = 0;
pub const SCTP_RECVV_RCVINFO: ::std::os::raw::c_uint = 1;
pub const SCTP_RECVV_NXTINFO: ::std::os::raw::c_uint = 2;
pub const SCTP_RECVV_RN: ::std::os::raw::c_uint = 3;
pub const SCTP_SENDV_NOINFO: ::std::os::raw::c_uint = 0;
pub const SCTP_SENDV_SNDINFO: ::std::os::raw::c_uint = 1;
pub const SCTP_SENDV_PRINFO: ::std::os::raw::c_uint = 2;
pub const SCTP_SENDV_AUTHINFO: ::std::os::raw::c_uint = 3;
pub const SCTP_SENDV_SPA: ::std::os::raw::c_uint = 4;
pub const SCTP_SEND_SNDINFO_VALID: ::std::os::raw::c_uint = 1;
pub const SCTP_SEND_PRINFO_VALID: ::std::os::raw::c_uint = 2;
pub const SCTP_SEND_AUTHINFO_VALID: ::std::os::raw::c_uint = 4;
pub const SCTP_ASSOC_CHANGE: ::std::os::raw::c_uint = 1;
pub const SCTP_PEER_ADDR_CHANGE: ::std::os::raw::c_uint = 2;
pub const SCTP_REMOTE_ERROR: ::std::os::raw::c_uint = 3;
pub const SCTP_SEND_FAILED: ::std::os::raw::c_uint = 4;
pub const SCTP_SHUTDOWN_EVENT: ::std::os::raw::c_uint = 5;
pub const SCTP_ADAPTATION_INDICATION: ::std::os::raw::c_uint = 6;
pub const SCTP_PARTIAL_DELIVERY_EVENT: ::std::os::raw::c_uint = 7;
pub const SCTP_AUTHENTICATION_EVENT: ::std::os::raw::c_uint = 8;
pub const SCTP_STREAM_RESET_EVENT: ::std::os::raw::c_uint = 9;
pub const SCTP_SENDER_DRY_EVENT: ::std::os::raw::c_uint = 10;
pub const SCTP_NOTIFICATIONS_STOPPED_EVENT: ::std::os::raw::c_uint = 11;
pub const SCTP_ASSOC_RESET_EVENT: ::std::os::raw::c_uint = 12;
pub const SCTP_STREAM_CHANGE_EVENT: ::std::os::raw::c_uint = 13;
pub const SCTP_SEND_FAILED_EVENT: ::std::os::raw::c_uint = 14;
pub const SCTP_COMM_UP: ::std::os::raw::c_uint = 1;
pub const SCTP_COMM_LOST: ::std::os::raw::c_uint = 2;
pub const SCTP_RESTART: ::std::os::raw::c_uint = 3;
pub const SCTP_SHUTDOWN_COMP: ::std::os::raw::c_uint = 4;
pub const SCTP_CANT_STR_ASSOC: ::std::os::raw::c_uint = 5;
pub const SCTP_ASSOC_SUPPORTS_PR: ::std::os::raw::c_uint = 1;
pub const SCTP_ASSOC_SUPPORTS_AUTH: ::std::os::raw::c_uint = 2;
pub const SCTP_ASSOC_SUPPORTS_ASCONF: ::std::os::raw::c_uint = 3;
pub const SCTP_ASSOC_SUPPORTS_MULTIBUF: ::std::os::raw::c_uint = 4;
pub const SCTP_ASSOC_SUPPORTS_RE_CONFIG: ::std::os::raw::c_uint = 5;
pub const SCTP_ASSOC_SUPPORTS_MAX: ::std::os::raw::c_uint = 5;
pub const SCTP_ADDR_AVAILABLE: ::std::os::raw::c_uint = 1;
pub const SCTP_ADDR_UNREACHABLE: ::std::os::raw::c_uint = 2;
pub const SCTP_ADDR_REMOVED: ::std::os::raw::c_uint = 3;
pub const SCTP_ADDR_ADDED: ::std::os::raw::c_uint = 4;
pub const SCTP_ADDR_MADE_PRIM: ::std::os::raw::c_uint = 5;
pub const SCTP_ADDR_CONFIRMED: ::std::os::raw::c_uint = 6;
pub const SCTP_PARTIAL_DELIVERY_ABORTED: ::std::os::raw::c_uint = 1;
pub const SCTP_AUTH_NEW_KEY: ::std::os::raw::c_uint = 1;
pub const SCTP_AUTH_NO_AUTH: ::std::os::raw::c_uint = 2;
pub const SCTP_AUTH_FREE_KEY: ::std::os::raw::c_uint = 3;
pub const SCTP_STREAM_RESET_INCOMING_SSN: ::std::os::raw::c_uint = 1;
pub const SCTP_STREAM_RESET_OUTGOING_SSN: ::std::os::raw::c_uint = 2;
pub const SCTP_STREAM_RESET_DENIED: ::std::os::raw::c_uint = 4;
pub const SCTP_STREAM_RESET_FAILED: ::std::os::raw::c_uint = 8;
pub const SCTP_STREAM_CHANGED_DENIED: ::std::os::raw::c_uint = 16;
pub const SCTP_STREAM_RESET_INCOMING: ::std::os::raw::c_uint = 1;
pub const SCTP_STREAM_RESET_OUTGOING: ::std::os::raw::c_uint = 2;
pub const SCTP_ASSOC_RESET_DENIED: ::std::os::raw::c_uint = 4;
pub const SCTP_ASSOC_RESET_FAILED: ::std::os::raw::c_uint = 8;
pub const SCTP_STREAM_CHANGE_DENIED: ::std::os::raw::c_uint = 4;
pub const SCTP_STREAM_CHANGE_FAILED: ::std::os::raw::c_uint = 8;
pub const SCTP_DATA_UNSENT: ::std::os::raw::c_uint = 1;
pub const SCTP_DATA_SENT: ::std::os::raw::c_uint = 2;
pub const SCTP_NOTIFICATION: ::std::os::raw::c_uint = 16;
pub const SCTP_COMPLETE: ::std::os::raw::c_uint = 32;
pub const SCTP_EOF: ::std::os::raw::c_uint = 256;
pub const SCTP_ABORT: ::std::os::raw::c_uint = 512;
pub const SCTP_UNORDERED: ::std::os::raw::c_uint = 1024;
pub const SCTP_ADDR_OVER: ::std::os::raw::c_uint = 2048;
pub const SCTP_SENDALL: ::std::os::raw::c_uint = 4096;
pub const SCTP_EOR: ::std::os::raw::c_uint = 8192;
pub const SCTP_SACK_IMMEDIATELY: ::std::os::raw::c_uint = 16384;
pub const SCTP_PR_SCTP_NONE: ::std::os::raw::c_uint = 0;
pub const SCTP_PR_SCTP_TTL: ::std::os::raw::c_uint = 1;
pub const SCTP_PR_SCTP_BUF: ::std::os::raw::c_uint = 2;
pub const SCTP_PR_SCTP_RTX: ::std::os::raw::c_uint = 3;
pub const SCTP_RTOINFO: ::std::os::raw::c_uint = 1;
pub const SCTP_ASSOCINFO: ::std::os::raw::c_uint = 2;
pub const SCTP_INITMSG: ::std::os::raw::c_uint = 3;
pub const SCTP_NODELAY: ::std::os::raw::c_uint = 4;
pub const SCTP_AUTOCLOSE: ::std::os::raw::c_uint = 5;
pub const SCTP_PRIMARY_ADDR: ::std::os::raw::c_uint = 7;
pub const SCTP_ADAPTATION_LAYER: ::std::os::raw::c_uint = 8;
pub const SCTP_DISABLE_FRAGMENTS: ::std::os::raw::c_uint = 9;
pub const SCTP_PEER_ADDR_PARAMS: ::std::os::raw::c_uint = 10;
pub const SCTP_I_WANT_MAPPED_V4_ADDR: ::std::os::raw::c_uint = 13;
pub const SCTP_MAXSEG: ::std::os::raw::c_uint = 14;
pub const SCTP_DELAYED_SACK: ::std::os::raw::c_uint = 15;
pub const SCTP_FRAGMENT_INTERLEAVE: ::std::os::raw::c_uint = 16;
pub const SCTP_PARTIAL_DELIVERY_POINT: ::std::os::raw::c_uint = 17;
pub const SCTP_HMAC_IDENT: ::std::os::raw::c_uint = 20;
pub const SCTP_AUTH_ACTIVE_KEY: ::std::os::raw::c_uint = 21;
pub const SCTP_AUTO_ASCONF: ::std::os::raw::c_uint = 24;
pub const SCTP_MAX_BURST: ::std::os::raw::c_uint = 25;
pub const SCTP_CONTEXT: ::std::os::raw::c_uint = 26;
pub const SCTP_EXPLICIT_EOR: ::std::os::raw::c_uint = 27;
pub const SCTP_REUSE_PORT: ::std::os::raw::c_uint = 28;
pub const SCTP_EVENT: ::std::os::raw::c_uint = 30;
pub const SCTP_RECVRCVINFO: ::std::os::raw::c_uint = 31;
pub const SCTP_RECVNXTINFO: ::std::os::raw::c_uint = 32;
pub const SCTP_DEFAULT_SNDINFO: ::std::os::raw::c_uint = 33;
pub const SCTP_DEFAULT_PRINFO: ::std::os::raw::c_uint = 34;
pub const SCTP_REMOTE_UDP_ENCAPS_PORT: ::std::os::raw::c_uint = 36;
pub const SCTP_ENABLE_STREAM_RESET: ::std::os::raw::c_uint = 2304;
pub const SCTP_PLUGGABLE_SS: ::std::os::raw::c_uint = 4611;
pub const SCTP_SS_VALUE: ::std::os::raw::c_uint = 4612;
pub const SCTP_STATUS: ::std::os::raw::c_uint = 256;
pub const SCTP_GET_PEER_ADDR_INFO: ::std::os::raw::c_uint = 257;
pub const SCTP_PEER_AUTH_CHUNKS: ::std::os::raw::c_uint = 258;
pub const SCTP_LOCAL_AUTH_CHUNKS: ::std::os::raw::c_uint = 259;
pub const SCTP_GET_ASSOC_NUMBER: ::std::os::raw::c_uint = 260;
pub const SCTP_GET_ASSOC_ID_LIST: ::std::os::raw::c_uint = 261;
pub const SCTP_TIMEOUTS: ::std::os::raw::c_uint = 262;
pub const SCTP_PR_STREAM_STATUS: ::std::os::raw::c_uint = 263;
pub const SCTP_PR_ASSOC_STATUS: ::std::os::raw::c_uint = 264;
pub const SCTP_SET_PEER_PRIMARY_ADDR: ::std::os::raw::c_uint = 6;
pub const SCTP_AUTH_CHUNK: ::std::os::raw::c_uint = 18;
pub const SCTP_AUTH_KEY: ::std::os::raw::c_uint = 19;
pub const SCTP_AUTH_DEACTIVATE_KEY: ::std::os::raw::c_uint = 29;
pub const SCTP_AUTH_DELETE_KEY: ::std::os::raw::c_uint = 22;
pub const SCTP_RESET_STREAMS: ::std::os::raw::c_uint = 2305;
pub const SCTP_RESET_ASSOC: ::std::os::raw::c_uint = 2306;
pub const SCTP_ADD_STREAMS: ::std::os::raw::c_uint = 2307;
pub const SCTP_ENABLE_RESET_STREAM_REQ: ::std::os::raw::c_uint = 1;
pub const SCTP_ENABLE_RESET_ASSOC_REQ: ::std::os::raw::c_uint = 2;
pub const SCTP_ENABLE_CHANGE_ASSOC_REQ: ::std::os::raw::c_uint = 4;
pub const SCTP_ENABLE_VALUE_MASK: ::std::os::raw::c_uint = 7;
pub const SCTP_AUTH_HMAC_ID_RSVD: ::std::os::raw::c_uint = 0;
pub const SCTP_AUTH_HMAC_ID_SHA1: ::std::os::raw::c_uint = 1;
pub const SCTP_AUTH_HMAC_ID_SHA256: ::std::os::raw::c_uint = 3;
pub const SCTP_AUTH_HMAC_ID_SHA224: ::std::os::raw::c_uint = 4;
pub const SCTP_AUTH_HMAC_ID_SHA384: ::std::os::raw::c_uint = 5;
pub const SCTP_AUTH_HMAC_ID_SHA512: ::std::os::raw::c_uint = 6;
pub const SCTP_CLOSED: ::std::os::raw::c_uint = 0;
pub const SCTP_BOUND: ::std::os::raw::c_uint = 4096;
pub const SCTP_LISTEN: ::std::os::raw::c_uint = 8192;
pub const SCTP_COOKIE_WAIT: ::std::os::raw::c_uint = 2;
pub const SCTP_COOKIE_ECHOED: ::std::os::raw::c_uint = 4;
pub const SCTP_ESTABLISHED: ::std::os::raw::c_uint = 8;
pub const SCTP_SHUTDOWN_SENT: ::std::os::raw::c_uint = 16;
pub const SCTP_SHUTDOWN_RECEIVED: ::std::os::raw::c_uint = 32;
pub const SCTP_SHUTDOWN_ACK_SENT: ::std::os::raw::c_uint = 64;
pub const SCTP_SHUTDOWN_PENDING: ::std::os::raw::c_uint = 128;
pub const SCTP_ACTIVE: ::std::os::raw::c_uint = 1;
pub const SCTP_INACTIVE: ::std::os::raw::c_uint = 2;
pub const SCTP_UNCONFIRMED: ::std::os::raw::c_uint = 512;
pub const SCTP_DATA: ::std::os::raw::c_uint = 0;
pub const SCTP_INITIATION: ::std::os::raw::c_uint = 1;
pub const SCTP_INITIATION_ACK: ::std::os::raw::c_uint = 2;
pub const SCTP_SELECTIVE_ACK: ::std::os::raw::c_uint = 3;
pub const SCTP_HEARTBEAT_REQUEST: ::std::os::raw::c_uint = 4;
pub const SCTP_HEARTBEAT_ACK: ::std::os::raw::c_uint = 5;
pub const SCTP_ABORT_ASSOCIATION: ::std::os::raw::c_uint = 6;
pub const SCTP_SHUTDOWN: ::std::os::raw::c_uint = 7;
pub const SCTP_SHUTDOWN_ACK: ::std::os::raw::c_uint = 8;
pub const SCTP_OPERATION_ERROR: ::std::os::raw::c_uint = 9;
pub const SCTP_COOKIE_ECHO: ::std::os::raw::c_uint = 10;
pub const SCTP_COOKIE_ACK: ::std::os::raw::c_uint = 11;
pub const SCTP_ECN_ECHO: ::std::os::raw::c_uint = 12;
pub const SCTP_ECN_CWR: ::std::os::raw::c_uint = 13;
pub const SCTP_SHUTDOWN_COMPLETE: ::std::os::raw::c_uint = 14;
pub const SCTP_AUTHENTICATION: ::std::os::raw::c_uint = 15;
pub const SCTP_NR_SELECTIVE_ACK: ::std::os::raw::c_uint = 16;
pub const SCTP_ASCONF_ACK: ::std::os::raw::c_uint = 128;
pub const SCTP_PACKET_DROPPED: ::std::os::raw::c_uint = 129;
pub const SCTP_STREAM_RESET: ::std::os::raw::c_uint = 130;
pub const SCTP_PAD_CHUNK: ::std::os::raw::c_uint = 132;
pub const SCTP_FORWARD_CUM_TSN: ::std::os::raw::c_uint = 192;
pub const SCTP_ASCONF: ::std::os::raw::c_uint = 193;
pub const SCTP_CC_RFC2581: ::std::os::raw::c_uint = 0;
pub const SCTP_CC_HSTCP: ::std::os::raw::c_uint = 1;
pub const SCTP_CC_HTCP: ::std::os::raw::c_uint = 2;
pub const SCTP_CC_RTCC: ::std::os::raw::c_uint = 3;
pub const SCTP_CC_OPT_RTCC_SETMODE: ::std::os::raw::c_uint = 8192;
pub const SCTP_CC_OPT_USE_DCCC_EC: ::std::os::raw::c_uint = 8193;
pub const SCTP_CC_OPT_STEADY_STEP: ::std::os::raw::c_uint = 8194;
pub const SCTP_CMT_OFF: ::std::os::raw::c_uint = 0;
pub const SCTP_CMT_BASE: ::std::os::raw::c_uint = 1;
pub const SCTP_CMT_RPV1: ::std::os::raw::c_uint = 2;
pub const SCTP_CMT_RPV2: ::std::os::raw::c_uint = 3;
pub const SCTP_CMT_MPTCP: ::std::os::raw::c_uint = 4;
pub const SCTP_CMT_MAX: ::std::os::raw::c_uint = 4;
pub const SCTP_SS_DEFAULT: ::std::os::raw::c_uint = 0;
pub const SCTP_SS_ROUND_ROBIN: ::std::os::raw::c_uint = 1;
pub const SCTP_SS_ROUND_ROBIN_PACKET: ::std::os::raw::c_uint = 2;
pub const SCTP_SS_PRIORITY: ::std::os::raw::c_uint = 3;
pub const SCTP_SS_FAIR_BANDWITH: ::std::os::raw::c_uint = 4;
pub const SCTP_SS_FIRST_COME: ::std::os::raw::c_uint = 5;
pub const SCTP_BINDX_ADD_ADDR: ::std::os::raw::c_uint = 32769;
pub const SCTP_BINDX_REM_ADDR: ::std::os::raw::c_uint = 32770;
pub const SCTP_DUMP_OUTBOUND: ::std::os::raw::c_uint = 1;
pub const SCTP_DUMP_INBOUND: ::std::os::raw::c_uint = 0;
pub type sctp_assoc_t = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_common_header {
    pub source_port: u16,
    pub destination_port: u16,
    pub verification_tag: u32,
    pub crc32c: u32,
}
#[test]
fn bindgen_test_layout_sctp_common_header() {
    assert_eq!(
        ::std::mem::size_of::<sctp_common_header>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_common_header))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_common_header>(),
        1usize,
        concat!("Alignment of ", stringify!(sctp_common_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_common_header>())).source_port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_common_header),
            "::",
            stringify!(source_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_common_header>())).destination_port as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_common_header),
            "::",
            stringify!(destination_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_common_header>())).verification_tag as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_common_header),
            "::",
            stringify!(verification_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_common_header>())).crc32c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_common_header),
            "::",
            stringify!(crc32c)
        )
    );
}
#[cfg(any(target_os = "macos", target_os = "bitrig", target_os = "dragonfly",
          target_os = "freebsd", target_os = "openbsd", target_os = "netbsd"))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_conn {
    pub sconn_len: u8,
    pub sconn_family: u8,
    pub sconn_port: u16,
    pub sconn_addr: *mut ::std::os::raw::c_void,
}
#[cfg(any(target_os = "macos", target_os = "bitrig", target_os = "dragonfly",
          target_os = "freebsd", target_os = "openbsd", target_os = "netbsd"))]
#[test]
fn bindgen_test_layout_sockaddr_conn() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_conn>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_conn))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_conn>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_conn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_conn>())).sconn_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_conn),
            "::",
            stringify!(sconn_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_conn>())).sconn_family as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_conn),
            "::",
            stringify!(sconn_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_conn>())).sconn_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_conn),
            "::",
            stringify!(sconn_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_conn>())).sconn_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_conn),
            "::",
            stringify!(sconn_addr)
        )
    );
}
#[cfg(not(any(target_os = "macos", target_os = "bitrig", target_os = "dragonfly",
              target_os = "freebsd", target_os = "openbsd", target_os = "netbsd")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_conn {
    pub sconn_family: u8,
    pub sconn_port: u16,
    pub sconn_addr: *mut ::std::os::raw::c_void,
}
#[cfg(not(any(target_os = "macos", target_os = "bitrig", target_os = "dragonfly",
              target_os = "freebsd", target_os = "openbsd", target_os = "netbsd")))]
#[test]
fn bindgen_test_layout_sockaddr_conn() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_conn>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_conn))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_conn>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_conn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_conn>())).sconn_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_conn),
            "::",
            stringify!(sconn_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_conn>())).sconn_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_conn),
            "::",
            stringify!(sconn_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_conn>())).sconn_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_conn),
            "::",
            stringify!(sconn_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sctp_sockstore {
    pub sin: libc::sockaddr_in,
    pub sin6: libc::sockaddr_in6,
    pub sconn: sockaddr_conn,
    pub sa: libc::sockaddr,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_sctp_sockstore() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sockstore>(),
        32usize,
        concat!("Size of: ", stringify!(sctp_sockstore))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sockstore>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_sockstore))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sockstore>())).sin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sockstore),
            "::",
            stringify!(sin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sockstore>())).sin6 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sockstore),
            "::",
            stringify!(sin6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sockstore>())).sconn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sockstore),
            "::",
            stringify!(sconn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sockstore>())).sa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sockstore),
            "::",
            stringify!(sa)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_rcvinfo {
    pub rcv_sid: u16,
    pub rcv_ssn: u16,
    pub rcv_flags: u16,
    pub rcv_ppid: u32,
    pub rcv_tsn: u32,
    pub rcv_cumtsn: u32,
    pub rcv_context: u32,
    pub rcv_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_rcvinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_rcvinfo>(),
        28usize,
        concat!("Size of: ", stringify!(sctp_rcvinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_rcvinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_rcvinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_ssn as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_ssn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_ppid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_ppid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_tsn as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_tsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_cumtsn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_cumtsn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_context as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rcvinfo>())).rcv_assoc_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rcvinfo),
            "::",
            stringify!(rcv_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_nxtinfo {
    pub nxt_sid: u16,
    pub nxt_flags: u16,
    pub nxt_ppid: u32,
    pub nxt_length: u32,
    pub nxt_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_nxtinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_nxtinfo>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_nxtinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_nxtinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_nxtinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_ppid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_ppid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_nxtinfo>())).nxt_assoc_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_nxtinfo),
            "::",
            stringify!(nxt_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_recvv_rn {
    pub recvv_rcvinfo: sctp_rcvinfo,
    pub recvv_nxtinfo: sctp_nxtinfo,
}
#[test]
fn bindgen_test_layout_sctp_recvv_rn() {
    assert_eq!(
        ::std::mem::size_of::<sctp_recvv_rn>(),
        44usize,
        concat!("Size of: ", stringify!(sctp_recvv_rn))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_recvv_rn>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_recvv_rn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_recvv_rn>())).recvv_rcvinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_recvv_rn),
            "::",
            stringify!(recvv_rcvinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_recvv_rn>())).recvv_nxtinfo as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_recvv_rn),
            "::",
            stringify!(recvv_nxtinfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_snd_all_completes {
    pub sall_stream: u16,
    pub sall_flags: u16,
    pub sall_ppid: u32,
    pub sall_context: u32,
    pub sall_num_sent: u32,
    pub sall_num_failed: u32,
}
#[test]
fn bindgen_test_layout_sctp_snd_all_completes() {
    assert_eq!(
        ::std::mem::size_of::<sctp_snd_all_completes>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_snd_all_completes))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_snd_all_completes>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_snd_all_completes))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_snd_all_completes>())).sall_stream as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_snd_all_completes),
            "::",
            stringify!(sall_stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_snd_all_completes>())).sall_flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_snd_all_completes),
            "::",
            stringify!(sall_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_snd_all_completes>())).sall_ppid as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_snd_all_completes),
            "::",
            stringify!(sall_ppid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_snd_all_completes>())).sall_context as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_snd_all_completes),
            "::",
            stringify!(sall_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_snd_all_completes>())).sall_num_sent as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_snd_all_completes),
            "::",
            stringify!(sall_num_sent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_snd_all_completes>())).sall_num_failed as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_snd_all_completes),
            "::",
            stringify!(sall_num_failed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sndinfo {
    pub snd_sid: u16,
    pub snd_flags: u16,
    pub snd_ppid: u32,
    pub snd_context: u32,
    pub snd_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_sndinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sndinfo>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_sndinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sndinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_sndinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_ppid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_ppid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sndinfo>())).snd_assoc_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sndinfo),
            "::",
            stringify!(snd_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_prinfo {
    pub pr_policy: u16,
    pub pr_value: u32,
}
#[test]
fn bindgen_test_layout_sctp_prinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_prinfo>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_prinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_prinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_prinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prinfo>())).pr_policy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prinfo),
            "::",
            stringify!(pr_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prinfo>())).pr_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prinfo),
            "::",
            stringify!(pr_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authinfo {
    pub auth_keynumber: u16,
}
#[test]
fn bindgen_test_layout_sctp_authinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authinfo>(),
        2usize,
        concat!("Size of: ", stringify!(sctp_authinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(sctp_authinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authinfo>())).auth_keynumber as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authinfo),
            "::",
            stringify!(auth_keynumber)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sendv_spa {
    pub sendv_flags: u32,
    pub sendv_sndinfo: sctp_sndinfo,
    pub sendv_prinfo: sctp_prinfo,
    pub sendv_authinfo: sctp_authinfo,
}
#[test]
fn bindgen_test_layout_sctp_sendv_spa() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sendv_spa>(),
        32usize,
        concat!("Size of: ", stringify!(sctp_sendv_spa))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sendv_spa>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_sendv_spa))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sendv_spa>())).sendv_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sendv_spa),
            "::",
            stringify!(sendv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sendv_spa>())).sendv_sndinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sendv_spa),
            "::",
            stringify!(sendv_sndinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sendv_spa>())).sendv_prinfo as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sendv_spa),
            "::",
            stringify!(sendv_prinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sendv_spa>())).sendv_authinfo as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sendv_spa),
            "::",
            stringify!(sendv_authinfo)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sctp_udpencaps {
    pub sue_address: libc::sockaddr_storage,
    pub sue_assoc_id: u32,
    pub sue_port: u16,
}
#[test]
fn bindgen_test_layout_sctp_udpencaps() {
    assert_eq!(
        ::std::mem::size_of::<sctp_udpencaps>(),
        136usize,
        concat!("Size of: ", stringify!(sctp_udpencaps))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_udpencaps>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_udpencaps))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_udpencaps>())).sue_address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_udpencaps),
            "::",
            stringify!(sue_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_udpencaps>())).sue_assoc_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_udpencaps),
            "::",
            stringify!(sue_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_udpencaps>())).sue_port as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_udpencaps),
            "::",
            stringify!(sue_port)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_assoc_change {
    pub sac_type: u16,
    pub sac_flags: u16,
    pub sac_length: u32,
    pub sac_state: u16,
    pub sac_error: u16,
    pub sac_outbound_streams: u16,
    pub sac_inbound_streams: u16,
    pub sac_assoc_id: sctp_assoc_t,
    pub sac_info: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_sctp_assoc_change() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assoc_change>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_assoc_change))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assoc_change>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assoc_change))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sctp_paddr_change {
    pub spc_type: u16,
    pub spc_flags: u16,
    pub spc_length: u32,
    pub spc_aaddr: libc::sockaddr_storage,
    pub spc_state: u32,
    pub spc_error: u32,
    pub spc_assoc_id: sctp_assoc_t,
    pub spc_padding: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_sctp_paddr_change() {
    assert_eq!(
        ::std::mem::size_of::<sctp_paddr_change>(),
        152usize,
        concat!("Size of: ", stringify!(sctp_paddr_change))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_paddr_change>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_paddr_change))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_aaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_aaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_state as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_error as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_assoc_id as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddr_change>())).spc_padding as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddr_change),
            "::",
            stringify!(spc_padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_remote_error {
    pub sre_type: u16,
    pub sre_flags: u16,
    pub sre_length: u32,
    pub sre_error: u16,
    pub sre_assoc_id: sctp_assoc_t,
    pub sre_data: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_sctp_remote_error() {
    assert_eq!(
        ::std::mem::size_of::<sctp_remote_error>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_remote_error))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_remote_error>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_remote_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_error as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_assoc_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_remote_error>())).sre_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_remote_error),
            "::",
            stringify!(sre_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_shutdown_event {
    pub sse_type: u16,
    pub sse_flags: u16,
    pub sse_length: u32,
    pub sse_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_shutdown_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_shutdown_event>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_shutdown_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_shutdown_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_shutdown_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_shutdown_event>())).sse_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_shutdown_event),
            "::",
            stringify!(sse_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_shutdown_event>())).sse_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_shutdown_event),
            "::",
            stringify!(sse_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_shutdown_event>())).sse_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_shutdown_event),
            "::",
            stringify!(sse_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_shutdown_event>())).sse_assoc_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_shutdown_event),
            "::",
            stringify!(sse_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_adaptation_event {
    pub sai_type: u16,
    pub sai_flags: u16,
    pub sai_length: u32,
    pub sai_adaptation_ind: u32,
    pub sai_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_adaptation_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_adaptation_event>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_adaptation_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_adaptation_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_adaptation_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_adaptation_ind as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_adaptation_ind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_adaptation_event>())).sai_assoc_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_adaptation_event),
            "::",
            stringify!(sai_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_pdapi_event {
    pub pdapi_type: u16,
    pub pdapi_flags: u16,
    pub pdapi_length: u32,
    pub pdapi_indication: u32,
    pub pdapi_stream: u32,
    pub pdapi_seq: u32,
    pub pdapi_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_pdapi_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_pdapi_event>(),
        24usize,
        concat!("Size of: ", stringify!(sctp_pdapi_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_pdapi_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_pdapi_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_indication as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_indication)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_stream as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_seq as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_pdapi_event>())).pdapi_assoc_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_pdapi_event),
            "::",
            stringify!(pdapi_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authkey_event {
    pub auth_type: u16,
    pub auth_flags: u16,
    pub auth_length: u32,
    pub auth_keynumber: u16,
    pub auth_indication: u32,
    pub auth_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_authkey_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authkey_event>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_authkey_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authkey_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_authkey_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey_event>())).auth_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey_event>())).auth_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkey_event>())).auth_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_authkey_event>())).auth_keynumber as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_keynumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_authkey_event>())).auth_indication as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_indication)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_authkey_event>())).auth_assoc_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkey_event),
            "::",
            stringify!(auth_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sender_dry_event {
    pub sender_dry_type: u16,
    pub sender_dry_flags: u16,
    pub sender_dry_length: u32,
    pub sender_dry_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_sender_dry_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sender_dry_event>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_sender_dry_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sender_dry_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_sender_dry_event))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_sender_dry_event>())).sender_dry_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sender_dry_event),
            "::",
            stringify!(sender_dry_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_sender_dry_event>())).sender_dry_flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sender_dry_event),
            "::",
            stringify!(sender_dry_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_sender_dry_event>())).sender_dry_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sender_dry_event),
            "::",
            stringify!(sender_dry_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_sender_dry_event>())).sender_dry_assoc_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sender_dry_event),
            "::",
            stringify!(sender_dry_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_stream_reset_event {
    pub strreset_type: u16,
    pub strreset_flags: u16,
    pub strreset_length: u32,
    pub strreset_assoc_id: sctp_assoc_t,
    pub strreset_stream_list: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_sctp_stream_reset_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_stream_reset_event>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_stream_reset_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_stream_reset_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_stream_reset_event))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assoc_reset_event {
    pub assocreset_type: u16,
    pub assocreset_flags: u16,
    pub assocreset_length: u32,
    pub assocreset_assoc_id: sctp_assoc_t,
    pub assocreset_local_tsn: u32,
    pub assocreset_remote_tsn: u32,
}
#[test]
fn bindgen_test_layout_sctp_assoc_reset_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assoc_reset_event>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_assoc_reset_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assoc_reset_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assoc_reset_event))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_length as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_assoc_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_local_tsn as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_local_tsn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assoc_reset_event>())).assocreset_remote_tsn as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_reset_event),
            "::",
            stringify!(assocreset_remote_tsn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_stream_change_event {
    pub strchange_type: u16,
    pub strchange_flags: u16,
    pub strchange_length: u32,
    pub strchange_assoc_id: sctp_assoc_t,
    pub strchange_instrms: u16,
    pub strchange_outstrms: u16,
}
#[test]
fn bindgen_test_layout_sctp_stream_change_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_stream_change_event>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_stream_change_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_stream_change_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_stream_change_event))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_flags as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_length as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_assoc_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_instrms as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_instrms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_stream_change_event>())).strchange_outstrms as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_change_event),
            "::",
            stringify!(strchange_outstrms)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_send_failed_event {
    pub ssfe_type: u16,
    pub ssfe_flags: u16,
    pub ssfe_length: u32,
    pub ssfe_error: u32,
    pub ssfe_info: sctp_sndinfo,
    pub ssfe_assoc_id: sctp_assoc_t,
    pub ssfe_data: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_sctp_send_failed_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_send_failed_event>(),
        32usize,
        concat!("Size of: ", stringify!(sctp_send_failed_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_send_failed_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_send_failed_event))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_event {
    pub se_assoc_id: sctp_assoc_t,
    pub se_type: u16,
    pub se_on: u8,
}
#[test]
fn bindgen_test_layout_sctp_event() {
    assert_eq!(
        ::std::mem::size_of::<sctp_event>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_event>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_event>())).se_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event),
            "::",
            stringify!(se_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_event>())).se_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event),
            "::",
            stringify!(se_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_event>())).se_on as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event),
            "::",
            stringify!(se_on)
        )
    );
}
#[repr(C)]
pub struct sctp_notification {
    pub sn_header: __BindgenUnionField<sctp_notification_sctp_tlv>,
    pub sn_assoc_change: __BindgenUnionField<sctp_assoc_change>,
    pub sn_paddr_change: __BindgenUnionField<sctp_paddr_change>,
    pub sn_remote_error: __BindgenUnionField<sctp_remote_error>,
    pub sn_shutdown_event: __BindgenUnionField<sctp_shutdown_event>,
    pub sn_adaptation_event: __BindgenUnionField<sctp_adaptation_event>,
    pub sn_pdapi_event: __BindgenUnionField<sctp_pdapi_event>,
    pub sn_auth_event: __BindgenUnionField<sctp_authkey_event>,
    pub sn_sender_dry_event: __BindgenUnionField<sctp_sender_dry_event>,
    pub sn_send_failed_event: __BindgenUnionField<sctp_send_failed_event>,
    pub sn_strreset_event: __BindgenUnionField<sctp_stream_reset_event>,
    pub sn_assocreset_event: __BindgenUnionField<sctp_assoc_reset_event>,
    pub sn_strchange_event: __BindgenUnionField<sctp_stream_change_event>,
    pub bindgen_union_field: [u64; 19usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_notification_sctp_tlv {
    pub sn_type: u16,
    pub sn_flags: u16,
    pub sn_length: u32,
}
#[test]
fn bindgen_test_layout_sctp_notification_sctp_tlv() {
    assert_eq!(
        ::std::mem::size_of::<sctp_notification_sctp_tlv>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_notification_sctp_tlv))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_notification_sctp_tlv>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_notification_sctp_tlv))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification_sctp_tlv>())).sn_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification_sctp_tlv),
            "::",
            stringify!(sn_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification_sctp_tlv>())).sn_flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification_sctp_tlv),
            "::",
            stringify!(sn_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_notification_sctp_tlv>())).sn_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_notification_sctp_tlv),
            "::",
            stringify!(sn_length)
        )
    );
}
#[test]
fn bindgen_test_layout_sctp_notification() {
    assert_eq!(
        ::std::mem::size_of::<sctp_notification>(),
        152usize,
        concat!("Size of: ", stringify!(sctp_notification))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_notification>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_notification))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_event_subscribe {
    pub sctp_data_io_event: u8,
    pub sctp_association_event: u8,
    pub sctp_address_event: u8,
    pub sctp_send_failure_event: u8,
    pub sctp_peer_error_event: u8,
    pub sctp_shutdown_event: u8,
    pub sctp_partial_delivery_event: u8,
    pub sctp_adaptation_layer_event: u8,
    pub sctp_authentication_event: u8,
    pub sctp_sender_dry_event: u8,
    pub sctp_stream_reset_event: u8,
}
#[test]
fn bindgen_test_layout_sctp_event_subscribe() {
    assert_eq!(
        ::std::mem::size_of::<sctp_event_subscribe>(),
        11usize,
        concat!("Size of: ", stringify!(sctp_event_subscribe))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_event_subscribe>(),
        1usize,
        concat!("Alignment of ", stringify!(sctp_event_subscribe))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_data_io_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_data_io_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_association_event as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_association_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_address_event as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_address_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_send_failure_event as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_send_failure_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_peer_error_event as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_peer_error_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_shutdown_event as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_shutdown_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_partial_delivery_event as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_partial_delivery_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_adaptation_layer_event as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_adaptation_layer_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_authentication_event as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_authentication_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_sender_dry_event as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_sender_dry_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_event_subscribe>())).sctp_stream_reset_event as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_event_subscribe),
            "::",
            stringify!(sctp_stream_reset_event)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_initmsg {
    pub sinit_num_ostreams: u16,
    pub sinit_max_instreams: u16,
    pub sinit_max_attempts: u16,
    pub sinit_max_init_timeo: u16,
}
#[test]
fn bindgen_test_layout_sctp_initmsg() {
    assert_eq!(
        ::std::mem::size_of::<sctp_initmsg>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_initmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_initmsg>(),
        2usize,
        concat!("Alignment of ", stringify!(sctp_initmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_initmsg>())).sinit_num_ostreams as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_initmsg),
            "::",
            stringify!(sinit_num_ostreams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_initmsg>())).sinit_max_instreams as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_initmsg),
            "::",
            stringify!(sinit_max_instreams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_initmsg>())).sinit_max_attempts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_initmsg),
            "::",
            stringify!(sinit_max_attempts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_initmsg>())).sinit_max_init_timeo as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_initmsg),
            "::",
            stringify!(sinit_max_init_timeo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_rtoinfo {
    pub srto_assoc_id: sctp_assoc_t,
    pub srto_initial: u32,
    pub srto_max: u32,
    pub srto_min: u32,
}
#[test]
fn bindgen_test_layout_sctp_rtoinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_rtoinfo>(),
        16usize,
        concat!("Size of: ", stringify!(sctp_rtoinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_rtoinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_rtoinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rtoinfo>())).srto_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rtoinfo),
            "::",
            stringify!(srto_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rtoinfo>())).srto_initial as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rtoinfo),
            "::",
            stringify!(srto_initial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rtoinfo>())).srto_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rtoinfo),
            "::",
            stringify!(srto_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_rtoinfo>())).srto_min as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_rtoinfo),
            "::",
            stringify!(srto_min)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assocparams {
    pub sasoc_assoc_id: sctp_assoc_t,
    pub sasoc_peer_rwnd: u32,
    pub sasoc_local_rwnd: u32,
    pub sasoc_cookie_life: u32,
    pub sasoc_asocmaxrxt: u16,
    pub sasoc_number_peer_destinations: u16,
}
#[test]
fn bindgen_test_layout_sctp_assocparams() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assocparams>(),
        20usize,
        concat!("Size of: ", stringify!(sctp_assocparams))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assocparams>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assocparams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_peer_rwnd as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_peer_rwnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_local_rwnd as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_local_rwnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_cookie_life as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_cookie_life)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_asocmaxrxt as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_asocmaxrxt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_assocparams>())).sasoc_number_peer_destinations as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assocparams),
            "::",
            stringify!(sasoc_number_peer_destinations)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sctp_setprim {
    pub ssp_addr: libc::sockaddr_storage,
    pub ssp_assoc_id: sctp_assoc_t,
    pub ssp_padding: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_sctp_setprim() {
    assert_eq!(
        ::std::mem::size_of::<sctp_setprim>(),
        136usize,
        concat!("Size of: ", stringify!(sctp_setprim))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_setprim>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_setprim))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_setprim>())).ssp_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setprim),
            "::",
            stringify!(ssp_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_setprim>())).ssp_assoc_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setprim),
            "::",
            stringify!(ssp_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_setprim>())).ssp_padding as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setprim),
            "::",
            stringify!(ssp_padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_setadaptation {
    pub ssb_adaptation_ind: u32,
}
#[test]
fn bindgen_test_layout_sctp_setadaptation() {
    assert_eq!(
        ::std::mem::size_of::<sctp_setadaptation>(),
        4usize,
        concat!("Size of: ", stringify!(sctp_setadaptation))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_setadaptation>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_setadaptation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_setadaptation>())).ssb_adaptation_ind as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setadaptation),
            "::",
            stringify!(ssb_adaptation_ind)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sctp_paddrparams {
    pub spp_address: libc::sockaddr_storage,
    pub spp_assoc_id: sctp_assoc_t,
    pub spp_hbinterval: u32,
    pub spp_pathmtu: u32,
    pub spp_flags: u32,
    pub spp_ipv6_flowlabel: u32,
    pub spp_pathmaxrxt: u16,
    pub spp_dscp: u8,
}
#[test]
fn bindgen_test_layout_sctp_paddrparams() {
    assert_eq!(
        ::std::mem::size_of::<sctp_paddrparams>(),
        152usize,
        concat!("Size of: ", stringify!(sctp_paddrparams))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_paddrparams>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_paddrparams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_assoc_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_hbinterval as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_hbinterval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_pathmtu as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_pathmtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_flags as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_paddrparams>())).spp_ipv6_flowlabel as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_ipv6_flowlabel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_pathmaxrxt as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_pathmaxrxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrparams>())).spp_dscp as *const _ as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrparams),
            "::",
            stringify!(spp_dscp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assoc_value {
    pub assoc_id: sctp_assoc_t,
    pub assoc_value: u32,
}
#[test]
fn bindgen_test_layout_sctp_assoc_value() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assoc_value>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_assoc_value))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assoc_value>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assoc_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_value>())).assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_value),
            "::",
            stringify!(assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_assoc_value>())).assoc_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_assoc_value),
            "::",
            stringify!(assoc_value)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_reset_streams {
    pub srs_assoc_id: sctp_assoc_t,
    pub srs_flags: u16,
    pub srs_number_streams: u16,
    pub srs_stream_list: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_sctp_reset_streams() {
    assert_eq!(
        ::std::mem::size_of::<sctp_reset_streams>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_reset_streams))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_reset_streams>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_reset_streams))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_add_streams {
    pub sas_assoc_id: sctp_assoc_t,
    pub sas_instrms: u16,
    pub sas_outstrms: u16,
}
#[test]
fn bindgen_test_layout_sctp_add_streams() {
    assert_eq!(
        ::std::mem::size_of::<sctp_add_streams>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_add_streams))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_add_streams>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_add_streams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_add_streams>())).sas_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_add_streams),
            "::",
            stringify!(sas_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_add_streams>())).sas_instrms as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_add_streams),
            "::",
            stringify!(sas_instrms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_add_streams>())).sas_outstrms as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_add_streams),
            "::",
            stringify!(sas_outstrms)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_hmacalgo {
    pub shmac_number_of_idents: u32,
    pub shmac_idents: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_sctp_hmacalgo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_hmacalgo>(),
        4usize,
        concat!("Size of: ", stringify!(sctp_hmacalgo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_hmacalgo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_hmacalgo))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sack_info {
    pub sack_assoc_id: sctp_assoc_t,
    pub sack_delay: u32,
    pub sack_freq: u32,
}
#[test]
fn bindgen_test_layout_sctp_sack_info() {
    assert_eq!(
        ::std::mem::size_of::<sctp_sack_info>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_sack_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_sack_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_sack_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sack_info>())).sack_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sack_info),
            "::",
            stringify!(sack_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sack_info>())).sack_delay as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sack_info),
            "::",
            stringify!(sack_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_sack_info>())).sack_freq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_sack_info),
            "::",
            stringify!(sack_freq)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_default_prinfo {
    pub pr_policy: u16,
    pub pr_value: u32,
    pub pr_assoc_id: sctp_assoc_t,
}
#[test]
fn bindgen_test_layout_sctp_default_prinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_default_prinfo>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_default_prinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_default_prinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_default_prinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_default_prinfo>())).pr_policy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_default_prinfo),
            "::",
            stringify!(pr_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_default_prinfo>())).pr_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_default_prinfo),
            "::",
            stringify!(pr_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_default_prinfo>())).pr_assoc_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_default_prinfo),
            "::",
            stringify!(pr_assoc_id)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sctp_paddrinfo {
    pub spinfo_address: libc::sockaddr_storage,
    pub spinfo_assoc_id: sctp_assoc_t,
    pub spinfo_state: i32,
    pub spinfo_cwnd: u32,
    pub spinfo_srtt: u32,
    pub spinfo_rto: u32,
    pub spinfo_mtu: u32,
}
#[test]
fn bindgen_test_layout_sctp_paddrinfo() {
    assert_eq!(
        ::std::mem::size_of::<sctp_paddrinfo>(),
        152usize,
        concat!("Size of: ", stringify!(sctp_paddrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_paddrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_paddrinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_assoc_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_state as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_cwnd as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_srtt as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_srtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_rto as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_rto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_paddrinfo>())).spinfo_mtu as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_paddrinfo),
            "::",
            stringify!(spinfo_mtu)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sctp_status {
    pub sstat_assoc_id: sctp_assoc_t,
    pub sstat_state: i32,
    pub sstat_rwnd: u32,
    pub sstat_unackdata: u16,
    pub sstat_penddata: u16,
    pub sstat_instrms: u16,
    pub sstat_outstrms: u16,
    pub sstat_fragmentation_point: u32,
    pub sstat_primary: sctp_paddrinfo,
}
#[test]
fn bindgen_test_layout_sctp_status() {
    assert_eq!(
        ::std::mem::size_of::<sctp_status>(),
        176usize,
        concat!("Size of: ", stringify!(sctp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_status>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_rwnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_rwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_unackdata as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_unackdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_penddata as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_penddata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_instrms as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_instrms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_outstrms as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_outstrms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_status>())).sstat_fragmentation_point as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_fragmentation_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_status>())).sstat_primary as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_status),
            "::",
            stringify!(sstat_primary)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_authchunks {
    pub gauth_assoc_id: sctp_assoc_t,
    pub gauth_chunks: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_sctp_authchunks() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authchunks>(),
        4usize,
        concat!("Size of: ", stringify!(sctp_authchunks))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authchunks>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_authchunks))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_assoc_ids {
    pub gaids_number_of_ids: u32,
    pub gaids_assoc_id: __IncompleteArrayField<sctp_assoc_t>,
}
#[test]
fn bindgen_test_layout_sctp_assoc_ids() {
    assert_eq!(
        ::std::mem::size_of::<sctp_assoc_ids>(),
        4usize,
        concat!("Size of: ", stringify!(sctp_assoc_ids))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_assoc_ids>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_assoc_ids))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sctp_setpeerprim {
    pub sspp_addr: libc::sockaddr_storage,
    pub sspp_assoc_id: sctp_assoc_t,
    pub sspp_padding: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_sctp_setpeerprim() {
    assert_eq!(
        ::std::mem::size_of::<sctp_setpeerprim>(),
        136usize,
        concat!("Size of: ", stringify!(sctp_setpeerprim))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_setpeerprim>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_setpeerprim))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_setpeerprim>())).sspp_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setpeerprim),
            "::",
            stringify!(sspp_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_setpeerprim>())).sspp_assoc_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setpeerprim),
            "::",
            stringify!(sspp_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_setpeerprim>())).sspp_padding as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_setpeerprim),
            "::",
            stringify!(sspp_padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authchunk {
    pub sauth_chunk: u8,
}
#[test]
fn bindgen_test_layout_sctp_authchunk() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authchunk>(),
        1usize,
        concat!("Size of: ", stringify!(sctp_authchunk))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authchunk>(),
        1usize,
        concat!("Alignment of ", stringify!(sctp_authchunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authchunk>())).sauth_chunk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authchunk),
            "::",
            stringify!(sauth_chunk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_get_nonce_values {
    pub gn_assoc_id: sctp_assoc_t,
    pub gn_peers_tag: u32,
    pub gn_local_tag: u32,
}
#[test]
fn bindgen_test_layout_sctp_get_nonce_values() {
    assert_eq!(
        ::std::mem::size_of::<sctp_get_nonce_values>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_get_nonce_values))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_get_nonce_values>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_get_nonce_values))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_get_nonce_values>())).gn_assoc_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_get_nonce_values),
            "::",
            stringify!(gn_assoc_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_get_nonce_values>())).gn_peers_tag as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_get_nonce_values),
            "::",
            stringify!(gn_peers_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_get_nonce_values>())).gn_local_tag as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_get_nonce_values),
            "::",
            stringify!(gn_local_tag)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sctp_authkey {
    pub sca_assoc_id: sctp_assoc_t,
    pub sca_keynumber: u16,
    pub sca_keylength: u16,
    pub sca_key: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_sctp_authkey() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authkey>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_authkey))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authkey>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_authkey))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authkeyid {
    pub scact_assoc_id: sctp_assoc_t,
    pub scact_keynumber: u16,
}
#[test]
fn bindgen_test_layout_sctp_authkeyid() {
    assert_eq!(
        ::std::mem::size_of::<sctp_authkeyid>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_authkeyid))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_authkeyid>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_authkeyid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkeyid>())).scact_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkeyid),
            "::",
            stringify!(scact_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_authkeyid>())).scact_keynumber as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_authkeyid),
            "::",
            stringify!(scact_keynumber)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_cc_option {
    pub option: ::std::os::raw::c_int,
    pub aid_value: sctp_assoc_value,
}
#[test]
fn bindgen_test_layout_sctp_cc_option() {
    assert_eq!(
        ::std::mem::size_of::<sctp_cc_option>(),
        12usize,
        concat!("Size of: ", stringify!(sctp_cc_option))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_cc_option>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_cc_option))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_cc_option>())).option as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_cc_option),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_cc_option>())).aid_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_cc_option),
            "::",
            stringify!(aid_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_stream_value {
    pub assoc_id: sctp_assoc_t,
    pub stream_id: u16,
    pub stream_value: u16,
}
#[test]
fn bindgen_test_layout_sctp_stream_value() {
    assert_eq!(
        ::std::mem::size_of::<sctp_stream_value>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_stream_value))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_stream_value>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_stream_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_stream_value>())).assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_value),
            "::",
            stringify!(assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_stream_value>())).stream_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_value),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_stream_value>())).stream_value as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_stream_value),
            "::",
            stringify!(stream_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_timeouts {
    pub stimo_assoc_id: sctp_assoc_t,
    pub stimo_init: u32,
    pub stimo_data: u32,
    pub stimo_sack: u32,
    pub stimo_shutdown: u32,
    pub stimo_heartbeat: u32,
    pub stimo_cookie: u32,
    pub stimo_shutdownack: u32,
}
#[test]
fn bindgen_test_layout_sctp_timeouts() {
    assert_eq!(
        ::std::mem::size_of::<sctp_timeouts>(),
        32usize,
        concat!("Size of: ", stringify!(sctp_timeouts))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_timeouts>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_timeouts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeouts>())).stimo_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeouts),
            "::",
            stringify!(stimo_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeouts>())).stimo_init as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeouts),
            "::",
            stringify!(stimo_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeouts>())).stimo_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeouts),
            "::",
            stringify!(stimo_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeouts>())).stimo_sack as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeouts),
            "::",
            stringify!(stimo_sack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeouts>())).stimo_shutdown as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeouts),
            "::",
            stringify!(stimo_shutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeouts>())).stimo_heartbeat as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeouts),
            "::",
            stringify!(stimo_heartbeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeouts>())).stimo_cookie as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeouts),
            "::",
            stringify!(stimo_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeouts>())).stimo_shutdownack as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeouts),
            "::",
            stringify!(stimo_shutdownack)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_prstatus {
    pub sprstat_assoc_id: sctp_assoc_t,
    pub sprstat_sid: u16,
    pub sprstat_policy: u16,
    pub sprstat_abandoned_unsent: u64,
    pub sprstat_abandoned_sent: u64,
}
#[test]
fn bindgen_test_layout_sctp_prstatus() {
    assert_eq!(
        ::std::mem::size_of::<sctp_prstatus>(),
        24usize,
        concat!("Size of: ", stringify!(sctp_prstatus))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_prstatus>(),
        8usize,
        concat!("Alignment of ", stringify!(sctp_prstatus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_assoc_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_assoc_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_sid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_policy as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_abandoned_unsent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_abandoned_unsent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctp_prstatus>())).sprstat_abandoned_sent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_prstatus),
            "::",
            stringify!(sprstat_abandoned_sent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct socket {
    _unused: [u8; 0],
}
extern "C" {
    pub fn usrsctp_init(
        arg1: u16,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                addr: *mut ::std::os::raw::c_void,
                buffer: *mut ::std::os::raw::c_void,
                length: usize,
                tos: u8,
                set_df: u8,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...),
        >,
    );
    pub fn usrsctp_socket(
        domain: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        receive_cb: ::std::option::Option<
            unsafe extern "C" fn(
                sock: *mut socket,
                addr: sctp_sockstore,
                data: *mut ::std::os::raw::c_void,
                datalen: usize,
                arg1: sctp_rcvinfo,
                flags: ::std::os::raw::c_int,
                ulp_info: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        send_cb: ::std::option::Option<
            unsafe extern "C" fn(sock: *mut socket, sb_free: u32) -> ::std::os::raw::c_int,
        >,
        sb_threshold: u32,
        ulp_info: *mut ::std::os::raw::c_void,
    ) -> *mut socket;
    pub fn usrsctp_setsockopt(
        so: *mut socket,
        level: ::std::os::raw::c_int,
        option_name: ::std::os::raw::c_int,
        option_value: *const ::std::os::raw::c_void,
        option_len: libc::socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_getsockopt(
        so: *mut socket,
        level: ::std::os::raw::c_int,
        option_name: ::std::os::raw::c_int,
        option_value: *mut ::std::os::raw::c_void,
        option_len: *mut libc::socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_opt_info(
        so: *mut socket,
        id: sctp_assoc_t,
        opt: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
        size: *mut libc::socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_getpaddrs(
        so: *mut socket,
        id: sctp_assoc_t,
        raddrs: *mut *mut libc::sockaddr,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_freepaddrs(addrs: *mut libc::sockaddr);
    pub fn usrsctp_getladdrs(
        so: *mut socket,
        id: sctp_assoc_t,
        raddrs: *mut *mut libc::sockaddr,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_freeladdrs(addrs: *mut libc::sockaddr);
    pub fn usrsctp_sendv(
        so: *mut socket,
        data: *const ::std::os::raw::c_void,
        len: usize,
        to: *mut libc::sockaddr,
        addrcnt: ::std::os::raw::c_int,
        info: *mut ::std::os::raw::c_void,
        infolen: libc::socklen_t,
        infotype: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_int,
    ) -> isize;
    pub fn usrsctp_recvv(
        so: *mut socket,
        dbuf: *mut ::std::os::raw::c_void,
        len: usize,
        from: *mut libc::sockaddr,
        fromlen: *mut libc::socklen_t,
        info: *mut ::std::os::raw::c_void,
        infolen: *mut libc::socklen_t,
        infotype: *mut ::std::os::raw::c_uint,
        msg_flags: *mut ::std::os::raw::c_int,
    ) -> isize;
    pub fn usrsctp_bind(
        so: *mut socket,
        name: *mut libc::sockaddr,
        namelen: libc::socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_bindx(
        so: *mut socket,
        addrs: *mut libc::sockaddr,
        addrcnt: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_listen(so: *mut socket, backlog: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
    pub fn usrsctp_accept(
        so: *mut socket,
        aname: *mut libc::sockaddr,
        anamelen: *mut libc::socklen_t,
    ) -> *mut socket;
    pub fn usrsctp_peeloff(arg1: *mut socket, arg2: sctp_assoc_t) -> *mut socket;
    pub fn usrsctp_connect(
        so: *mut socket,
        name: *mut libc::sockaddr,
        namelen: libc::socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_connectx(
        so: *mut socket,
        addrs: *const libc::sockaddr,
        addrcnt: ::std::os::raw::c_int,
        id: *mut sctp_assoc_t,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_close(so: *mut socket);
    pub fn usrsctp_getassocid(arg1: *mut socket, arg2: *mut libc::sockaddr) -> sctp_assoc_t;
    pub fn usrsctp_finish() -> ::std::os::raw::c_int;
    pub fn usrsctp_shutdown(so: *mut socket, how: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn usrsctp_conninput(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: u8,
    );
    pub fn usrsctp_set_non_blocking(
        arg1: *mut socket,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_get_non_blocking(arg1: *mut socket) -> ::std::os::raw::c_int;
    pub fn usrsctp_register_address(arg1: *mut ::std::os::raw::c_void);
    pub fn usrsctp_deregister_address(arg1: *mut ::std::os::raw::c_void);
    pub fn usrsctp_set_ulpinfo(
        arg1: *mut socket,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn usrsctp_dumppacket(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn usrsctp_freedumpbuffer(arg1: *mut ::std::os::raw::c_char);
    pub fn usrsctp_enable_crc32c_offload();
    pub fn usrsctp_disable_crc32c_offload();
    pub fn usrsctp_crc32c(arg1: *mut ::std::os::raw::c_void, arg2: usize) -> u32;
    pub fn usrsctp_sysctl_set_sctp_sendspace(value: u32);
    pub fn usrsctp_sysctl_get_sctp_sendspace() -> u32;
    pub fn usrsctp_sysctl_set_sctp_recvspace(value: u32);
    pub fn usrsctp_sysctl_get_sctp_recvspace() -> u32;
    pub fn usrsctp_sysctl_set_sctp_auto_asconf(value: u32);
    pub fn usrsctp_sysctl_get_sctp_auto_asconf() -> u32;
    pub fn usrsctp_sysctl_set_sctp_multiple_asconfs(value: u32);
    pub fn usrsctp_sysctl_get_sctp_multiple_asconfs() -> u32;
    pub fn usrsctp_sysctl_set_sctp_ecn_enable(value: u32);
    pub fn usrsctp_sysctl_get_sctp_ecn_enable() -> u32;
    pub fn usrsctp_sysctl_set_sctp_pr_enable(value: u32);
    pub fn usrsctp_sysctl_get_sctp_pr_enable() -> u32;
    pub fn usrsctp_sysctl_set_sctp_auth_enable(value: u32);
    pub fn usrsctp_sysctl_get_sctp_auth_enable() -> u32;
    pub fn usrsctp_sysctl_set_sctp_asconf_enable(value: u32);
    pub fn usrsctp_sysctl_get_sctp_asconf_enable() -> u32;
    pub fn usrsctp_sysctl_set_sctp_reconfig_enable(value: u32);
    pub fn usrsctp_sysctl_get_sctp_reconfig_enable() -> u32;
    pub fn usrsctp_sysctl_set_sctp_nrsack_enable(value: u32);
    pub fn usrsctp_sysctl_get_sctp_nrsack_enable() -> u32;
    pub fn usrsctp_sysctl_set_sctp_pktdrop_enable(value: u32);
    pub fn usrsctp_sysctl_get_sctp_pktdrop_enable() -> u32;
    pub fn usrsctp_sysctl_set_sctp_no_csum_on_loopback(value: u32);
    pub fn usrsctp_sysctl_get_sctp_no_csum_on_loopback() -> u32;
    pub fn usrsctp_sysctl_set_sctp_peer_chunk_oh(value: u32);
    pub fn usrsctp_sysctl_get_sctp_peer_chunk_oh() -> u32;
    pub fn usrsctp_sysctl_set_sctp_max_burst_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_max_burst_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_max_chunks_on_queue(value: u32);
    pub fn usrsctp_sysctl_get_sctp_max_chunks_on_queue() -> u32;
    pub fn usrsctp_sysctl_set_sctp_hashtblsize(value: u32);
    pub fn usrsctp_sysctl_get_sctp_hashtblsize() -> u32;
    pub fn usrsctp_sysctl_set_sctp_pcbtblsize(value: u32);
    pub fn usrsctp_sysctl_get_sctp_pcbtblsize() -> u32;
    pub fn usrsctp_sysctl_set_sctp_min_split_point(value: u32);
    pub fn usrsctp_sysctl_get_sctp_min_split_point() -> u32;
    pub fn usrsctp_sysctl_set_sctp_chunkscale(value: u32);
    pub fn usrsctp_sysctl_get_sctp_chunkscale() -> u32;
    pub fn usrsctp_sysctl_set_sctp_delayed_sack_time_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_delayed_sack_time_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_sack_freq_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_sack_freq_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_system_free_resc_limit(value: u32);
    pub fn usrsctp_sysctl_get_sctp_system_free_resc_limit() -> u32;
    pub fn usrsctp_sysctl_set_sctp_asoc_free_resc_limit(value: u32);
    pub fn usrsctp_sysctl_get_sctp_asoc_free_resc_limit() -> u32;
    pub fn usrsctp_sysctl_set_sctp_heartbeat_interval_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_heartbeat_interval_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_pmtu_raise_time_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_pmtu_raise_time_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_shutdown_guard_time_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_shutdown_guard_time_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_secret_lifetime_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_secret_lifetime_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_rto_max_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_rto_max_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_rto_min_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_rto_min_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_rto_initial_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_rto_initial_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_init_rto_max_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_init_rto_max_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_valid_cookie_life_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_valid_cookie_life_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_init_rtx_max_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_init_rtx_max_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_assoc_rtx_max_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_assoc_rtx_max_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_path_rtx_max_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_path_rtx_max_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_add_more_threshold(value: u32);
    pub fn usrsctp_sysctl_get_sctp_add_more_threshold() -> u32;
    pub fn usrsctp_sysctl_set_sctp_nr_incoming_streams_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_nr_incoming_streams_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_nr_outgoing_streams_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_nr_outgoing_streams_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_cmt_on_off(value: u32);
    pub fn usrsctp_sysctl_get_sctp_cmt_on_off() -> u32;
    pub fn usrsctp_sysctl_set_sctp_cmt_use_dac(value: u32);
    pub fn usrsctp_sysctl_get_sctp_cmt_use_dac() -> u32;
    pub fn usrsctp_sysctl_set_sctp_use_cwnd_based_maxburst(value: u32);
    pub fn usrsctp_sysctl_get_sctp_use_cwnd_based_maxburst() -> u32;
    pub fn usrsctp_sysctl_set_sctp_nat_friendly(value: u32);
    pub fn usrsctp_sysctl_get_sctp_nat_friendly() -> u32;
    pub fn usrsctp_sysctl_set_sctp_L2_abc_variable(value: u32);
    pub fn usrsctp_sysctl_get_sctp_L2_abc_variable() -> u32;
    pub fn usrsctp_sysctl_set_sctp_mbuf_threshold_count(value: u32);
    pub fn usrsctp_sysctl_get_sctp_mbuf_threshold_count() -> u32;
    pub fn usrsctp_sysctl_set_sctp_do_drain(value: u32);
    pub fn usrsctp_sysctl_get_sctp_do_drain() -> u32;
    pub fn usrsctp_sysctl_set_sctp_hb_maxburst(value: u32);
    pub fn usrsctp_sysctl_get_sctp_hb_maxburst() -> u32;
    pub fn usrsctp_sysctl_set_sctp_abort_if_one_2_one_hits_limit(value: u32);
    pub fn usrsctp_sysctl_get_sctp_abort_if_one_2_one_hits_limit() -> u32;
    pub fn usrsctp_sysctl_set_sctp_min_residual(value: u32);
    pub fn usrsctp_sysctl_get_sctp_min_residual() -> u32;
    pub fn usrsctp_sysctl_set_sctp_max_retran_chunk(value: u32);
    pub fn usrsctp_sysctl_get_sctp_max_retran_chunk() -> u32;
    pub fn usrsctp_sysctl_set_sctp_logging_level(value: u32);
    pub fn usrsctp_sysctl_get_sctp_logging_level() -> u32;
    pub fn usrsctp_sysctl_set_sctp_default_cc_module(value: u32);
    pub fn usrsctp_sysctl_get_sctp_default_cc_module() -> u32;
    pub fn usrsctp_sysctl_set_sctp_default_frag_interleave(value: u32);
    pub fn usrsctp_sysctl_get_sctp_default_frag_interleave() -> u32;
    pub fn usrsctp_sysctl_set_sctp_mobility_base(value: u32);
    pub fn usrsctp_sysctl_get_sctp_mobility_base() -> u32;
    pub fn usrsctp_sysctl_set_sctp_mobility_fasthandoff(value: u32);
    pub fn usrsctp_sysctl_get_sctp_mobility_fasthandoff() -> u32;
    pub fn usrsctp_sysctl_set_sctp_inits_include_nat_friendly(value: u32);
    pub fn usrsctp_sysctl_get_sctp_inits_include_nat_friendly() -> u32;
    pub fn usrsctp_sysctl_set_sctp_udp_tunneling_port(value: u32);
    pub fn usrsctp_sysctl_get_sctp_udp_tunneling_port() -> u32;
    pub fn usrsctp_sysctl_set_sctp_enable_sack_immediately(value: u32);
    pub fn usrsctp_sysctl_get_sctp_enable_sack_immediately() -> u32;
    pub fn usrsctp_sysctl_set_sctp_vtag_time_wait(value: u32);
    pub fn usrsctp_sysctl_get_sctp_vtag_time_wait() -> u32;
    pub fn usrsctp_sysctl_set_sctp_blackhole(value: u32);
    pub fn usrsctp_sysctl_get_sctp_blackhole() -> u32;
    pub fn usrsctp_sysctl_set_sctp_diag_info_code(value: u32);
    pub fn usrsctp_sysctl_get_sctp_diag_info_code() -> u32;
    pub fn usrsctp_sysctl_set_sctp_fr_max_burst_default(value: u32);
    pub fn usrsctp_sysctl_get_sctp_fr_max_burst_default() -> u32;
    pub fn usrsctp_sysctl_set_sctp_path_pf_threshold(value: u32);
    pub fn usrsctp_sysctl_get_sctp_path_pf_threshold() -> u32;
    pub fn usrsctp_sysctl_set_sctp_default_ss_module(value: u32);
    pub fn usrsctp_sysctl_get_sctp_default_ss_module() -> u32;
    pub fn usrsctp_sysctl_set_sctp_rttvar_bw(value: u32);
    pub fn usrsctp_sysctl_get_sctp_rttvar_bw() -> u32;
    pub fn usrsctp_sysctl_set_sctp_rttvar_rtt(value: u32);
    pub fn usrsctp_sysctl_get_sctp_rttvar_rtt() -> u32;
    pub fn usrsctp_sysctl_set_sctp_rttvar_eqret(value: u32);
    pub fn usrsctp_sysctl_get_sctp_rttvar_eqret() -> u32;
    pub fn usrsctp_sysctl_set_sctp_steady_step(value: u32);
    pub fn usrsctp_sysctl_get_sctp_steady_step() -> u32;
    pub fn usrsctp_sysctl_set_sctp_use_dccc_ecn(value: u32);
    pub fn usrsctp_sysctl_get_sctp_use_dccc_ecn() -> u32;
    pub fn usrsctp_sysctl_set_sctp_buffer_splitting(value: u32);
    pub fn usrsctp_sysctl_get_sctp_buffer_splitting() -> u32;
    pub fn usrsctp_sysctl_set_sctp_initial_cwnd(value: u32);
    pub fn usrsctp_sysctl_get_sctp_initial_cwnd() -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_timeval {
    pub tv_sec: u32,
    pub tv_usec: u32,
}
#[test]
fn bindgen_test_layout_sctp_timeval() {
    assert_eq!(
        ::std::mem::size_of::<sctp_timeval>(),
        8usize,
        concat!("Size of: ", stringify!(sctp_timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<sctp_timeval>(),
        4usize,
        concat!("Alignment of ", stringify!(sctp_timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctp_timeval>())).tv_usec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctp_timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctpstat {
    pub sctps_discontinuitytime: sctp_timeval,
    pub sctps_currestab: u32,
    pub sctps_activeestab: u32,
    pub sctps_restartestab: u32,
    pub sctps_collisionestab: u32,
    pub sctps_passiveestab: u32,
    pub sctps_aborted: u32,
    pub sctps_shutdown: u32,
    pub sctps_outoftheblue: u32,
    pub sctps_checksumerrors: u32,
    pub sctps_outcontrolchunks: u32,
    pub sctps_outorderchunks: u32,
    pub sctps_outunorderchunks: u32,
    pub sctps_incontrolchunks: u32,
    pub sctps_inorderchunks: u32,
    pub sctps_inunorderchunks: u32,
    pub sctps_fragusrmsgs: u32,
    pub sctps_reasmusrmsgs: u32,
    pub sctps_outpackets: u32,
    pub sctps_inpackets: u32,
    pub sctps_recvpackets: u32,
    pub sctps_recvdatagrams: u32,
    pub sctps_recvpktwithdata: u32,
    pub sctps_recvsacks: u32,
    pub sctps_recvdata: u32,
    pub sctps_recvdupdata: u32,
    pub sctps_recvheartbeat: u32,
    pub sctps_recvheartbeatack: u32,
    pub sctps_recvecne: u32,
    pub sctps_recvauth: u32,
    pub sctps_recvauthmissing: u32,
    pub sctps_recvivalhmacid: u32,
    pub sctps_recvivalkeyid: u32,
    pub sctps_recvauthfailed: u32,
    pub sctps_recvexpress: u32,
    pub sctps_recvexpressm: u32,
    pub sctps_recv_spare: u32,
    pub sctps_recvswcrc: u32,
    pub sctps_recvhwcrc: u32,
    pub sctps_sendpackets: u32,
    pub sctps_sendsacks: u32,
    pub sctps_senddata: u32,
    pub sctps_sendretransdata: u32,
    pub sctps_sendfastretrans: u32,
    pub sctps_sendmultfastretrans: u32,
    pub sctps_sendheartbeat: u32,
    pub sctps_sendecne: u32,
    pub sctps_sendauth: u32,
    pub sctps_senderrors: u32,
    pub sctps_send_spare: u32,
    pub sctps_sendswcrc: u32,
    pub sctps_sendhwcrc: u32,
    pub sctps_pdrpfmbox: u32,
    pub sctps_pdrpfehos: u32,
    pub sctps_pdrpmbda: u32,
    pub sctps_pdrpmbct: u32,
    pub sctps_pdrpbwrpt: u32,
    pub sctps_pdrpcrupt: u32,
    pub sctps_pdrpnedat: u32,
    pub sctps_pdrppdbrk: u32,
    pub sctps_pdrptsnnf: u32,
    pub sctps_pdrpdnfnd: u32,
    pub sctps_pdrpdiwnp: u32,
    pub sctps_pdrpdizrw: u32,
    pub sctps_pdrpbadd: u32,
    pub sctps_pdrpmark: u32,
    pub sctps_timoiterator: u32,
    pub sctps_timodata: u32,
    pub sctps_timowindowprobe: u32,
    pub sctps_timoinit: u32,
    pub sctps_timosack: u32,
    pub sctps_timoshutdown: u32,
    pub sctps_timoheartbeat: u32,
    pub sctps_timocookie: u32,
    pub sctps_timosecret: u32,
    pub sctps_timopathmtu: u32,
    pub sctps_timoshutdownack: u32,
    pub sctps_timoshutdownguard: u32,
    pub sctps_timostrmrst: u32,
    pub sctps_timoearlyfr: u32,
    pub sctps_timoasconf: u32,
    pub sctps_timodelprim: u32,
    pub sctps_timoautoclose: u32,
    pub sctps_timoassockill: u32,
    pub sctps_timoinpkill: u32,
    pub sctps_spare: [u32; 11usize],
    pub sctps_hdrops: u32,
    pub sctps_badsum: u32,
    pub sctps_noport: u32,
    pub sctps_badvtag: u32,
    pub sctps_badsid: u32,
    pub sctps_nomem: u32,
    pub sctps_fastretransinrtt: u32,
    pub sctps_markedretrans: u32,
    pub sctps_naglesent: u32,
    pub sctps_naglequeued: u32,
    pub sctps_maxburstqueued: u32,
    pub sctps_ifnomemqueued: u32,
    pub sctps_windowprobed: u32,
    pub sctps_lowlevelerr: u32,
    pub sctps_lowlevelerrusr: u32,
    pub sctps_datadropchklmt: u32,
    pub sctps_datadroprwnd: u32,
    pub sctps_ecnereducedcwnd: u32,
    pub sctps_vtagexpress: u32,
    pub sctps_vtagbogus: u32,
    pub sctps_primary_randry: u32,
    pub sctps_cmt_randry: u32,
    pub sctps_slowpath_sack: u32,
    pub sctps_wu_sacks_sent: u32,
    pub sctps_sends_with_flags: u32,
    pub sctps_sends_with_unord: u32,
    pub sctps_sends_with_eof: u32,
    pub sctps_sends_with_abort: u32,
    pub sctps_protocol_drain_calls: u32,
    pub sctps_protocol_drains_done: u32,
    pub sctps_read_peeks: u32,
    pub sctps_cached_chk: u32,
    pub sctps_cached_strmoq: u32,
    pub sctps_left_abandon: u32,
    pub sctps_send_burst_avoid: u32,
    pub sctps_send_cwnd_avoid: u32,
    pub sctps_fwdtsn_map_over: u32,
    pub sctps_queue_upd_ecne: u32,
    pub sctps_reserved: [u32; 31usize],
}
#[test]
fn bindgen_test_layout_sctpstat() {
    assert_eq!(
        ::std::mem::size_of::<sctpstat>(),
        664usize,
        concat!("Size of: ", stringify!(sctpstat))
    );
    assert_eq!(
        ::std::mem::align_of::<sctpstat>(),
        4usize,
        concat!("Alignment of ", stringify!(sctpstat))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctpstat>())).sctps_discontinuitytime as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_discontinuitytime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_currestab as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_currestab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_activeestab as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_activeestab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_restartestab as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_restartestab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_collisionestab as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_collisionestab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_passiveestab as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_passiveestab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_aborted as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_aborted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_shutdown as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_shutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_outoftheblue as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_outoftheblue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_checksumerrors as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_checksumerrors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_outcontrolchunks as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_outcontrolchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_outorderchunks as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_outorderchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_outunorderchunks as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_outunorderchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_incontrolchunks as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_incontrolchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_inorderchunks as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_inorderchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_inunorderchunks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_inunorderchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_fragusrmsgs as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_fragusrmsgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_reasmusrmsgs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_reasmusrmsgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_outpackets as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_outpackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_inpackets as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_inpackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvpackets as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvpackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvdatagrams as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvdatagrams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvpktwithdata as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvpktwithdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvsacks as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvsacks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvdata as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvdupdata as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvdupdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvheartbeat as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvheartbeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvheartbeatack as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvheartbeatack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvecne as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvecne)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvauth as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvauth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvauthmissing as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvauthmissing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvivalhmacid as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvivalhmacid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvivalkeyid as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvivalkeyid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvauthfailed as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvauthfailed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvexpress as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvexpress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvexpressm as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvexpressm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recv_spare as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recv_spare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvswcrc as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvswcrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_recvhwcrc as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_recvhwcrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sendpackets as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendpackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sendsacks as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendsacks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_senddata as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_senddata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sendretransdata as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendretransdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sendfastretrans as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendfastretrans)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctpstat>())).sctps_sendmultfastretrans as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendmultfastretrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sendheartbeat as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendheartbeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sendecne as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendecne)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sendauth as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendauth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_senderrors as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_senderrors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_send_spare as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_send_spare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sendswcrc as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendswcrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sendhwcrc as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sendhwcrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpfmbox as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpfmbox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpfehos as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpfehos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpmbda as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpmbda)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpmbct as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpmbct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpbwrpt as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpbwrpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpcrupt as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpcrupt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpnedat as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpnedat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrppdbrk as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrppdbrk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrptsnnf as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrptsnnf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpdnfnd as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpdnfnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpdiwnp as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpdiwnp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpdizrw as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpdizrw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpbadd as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpbadd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_pdrpmark as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_pdrpmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoiterator as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoiterator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timodata as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timodata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timowindowprobe as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timowindowprobe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoinit as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timosack as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timosack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoshutdown as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoshutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoheartbeat as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoheartbeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timocookie as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timocookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timosecret as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timosecret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timopathmtu as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timopathmtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoshutdownack as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoshutdownack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctpstat>())).sctps_timoshutdownguard as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoshutdownguard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timostrmrst as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timostrmrst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoearlyfr as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoearlyfr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoasconf as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoasconf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timodelprim as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timodelprim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoautoclose as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoautoclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoassockill as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoassockill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_timoinpkill as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_timoinpkill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_spare as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_spare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_hdrops as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_hdrops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_badsum as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_badsum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_noport as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_noport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_badvtag as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_badvtag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_badsid as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_badsid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_nomem as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_nomem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_fastretransinrtt as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_fastretransinrtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_markedretrans as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_markedretrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_naglesent as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_naglesent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_naglequeued as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_naglequeued)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_maxburstqueued as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_maxburstqueued)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_ifnomemqueued as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_ifnomemqueued)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_windowprobed as *const _ as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_windowprobed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_lowlevelerr as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_lowlevelerr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_lowlevelerrusr as *const _ as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_lowlevelerrusr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_datadropchklmt as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_datadropchklmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_datadroprwnd as *const _ as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_datadroprwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_ecnereducedcwnd as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_ecnereducedcwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_vtagexpress as *const _ as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_vtagexpress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_vtagbogus as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_vtagbogus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_primary_randry as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_primary_randry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_cmt_randry as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_cmt_randry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_slowpath_sack as *const _ as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_slowpath_sack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_wu_sacks_sent as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_wu_sacks_sent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sends_with_flags as *const _ as usize },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sends_with_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sends_with_unord as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sends_with_unord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sends_with_eof as *const _ as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sends_with_eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_sends_with_abort as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_sends_with_abort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctpstat>())).sctps_protocol_drain_calls as *const _ as usize
        },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_protocol_drain_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sctpstat>())).sctps_protocol_drains_done as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_protocol_drains_done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_read_peeks as *const _ as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_read_peeks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_cached_chk as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_cached_chk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_cached_strmoq as *const _ as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_cached_strmoq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_left_abandon as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_left_abandon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_send_burst_avoid as *const _ as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_send_burst_avoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_send_cwnd_avoid as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_send_cwnd_avoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_fwdtsn_map_over as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_fwdtsn_map_over)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_queue_upd_ecne as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_queue_upd_ecne)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctpstat>())).sctps_reserved as *const _ as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(sctpstat),
            "::",
            stringify!(sctps_reserved)
        )
    );
}
extern "C" {
    pub fn usrsctp_get_stat(arg1: *mut sctpstat);
}
